// ===== ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏ô‡πâ‡∏≥ =====
async function loadDiscovery(retry = 0) {
  try {
    setLoadingDiscovery(true);
    addLog("üåã AI Discovery Pro v2 ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏∏‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏ô‡πâ‡∏≥...");

    // ‚úÖ 1. ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏°‡πà (v2)
    const res = await fetch("/api/visionary-discovery-pro-v2", { cache: "no-store" });
    if (!res.ok) throw new Error(`API error (${res.status})`);

    // ‚úÖ 2. ‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    const j = await res.json();
    if (!j || typeof j !== "object") throw new Error("Response ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å AI Discovery API");

    const list = Array.isArray(j.top)
      ? j.top
      : Array.isArray(j.discovered)
      ? j.discovered
      : [];

    if (!list.length) throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡∏à‡∏≤‡∏Å AI Discovery Pro");

    // ‚úÖ 3. ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏ó‡∏∏‡∏Å‡∏Ñ‡πà‡∏≤
    const formatted = list
      .filter((r) => r && r.symbol) // ‡∏Å‡∏±‡∏ô null / undefined
      .map((r) => ({
        symbol: String(r.symbol || "").toUpperCase(),
        lastClose: Number(r.price ?? r.lastClose ?? 0),
        rsi: Math.round(Number(r.rsi ?? 0)),
        reason:
          r.reason ||
          "AI ‡∏û‡∏ö‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ï‡πâ‡∏ô‡∏ô‡πâ‡∏≥‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô + ‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏ä‡∏¥‡∏á‡∏ö‡∏ß‡∏Å + ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏î‡∏µ",
        aiScore: Math.round(Number(r.aiScore ?? 0)),
        trend:
          r.trend ||
          (r.signal === "Buy"
            ? "Uptrend"
            : r.signal === "Sell"
            ? "Downtrend"
            : "Sideway"),
        signal: r.signal || "Hold",
      }));

    // ‚úÖ 4. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state
    setFutureDiscovery(formatted);
    addLog(`‚úÖ ‡∏û‡∏ö‡∏´‡∏∏‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏ô‡πâ‡∏≥ ${formatted.length} ‡∏ï‡∏±‡∏ß‡∏à‡∏≤‡∏Å AI Discovery Pro`);

    // ‚úÖ 5. ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 30 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
    for (const s of formatted.slice(0, 30)) {
      try {
        await fetchPrice(s.symbol);
      } catch (err) {
        addLog(`‚ö†Ô∏è ‡∏£‡∏≤‡∏Ñ‡∏≤ ${s.symbol} ‡∏î‡∏∂‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${err.message}`);
      }
    }
  } catch (err) {
    // ‚úÖ 6. ‡∏ñ‡πâ‡∏≤ error ‡∏à‡∏∞ retry ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    addLog(`‚ö†Ô∏è Discovery failed: ${err.message}`);
    if (retry < 1) setTimeout(() => loadDiscovery(retry + 1), 3000);
  } finally {
    // ‚úÖ 7. ‡∏õ‡∏¥‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏´‡∏•‡∏î
    setLoadingDiscovery(false);
  }
}
