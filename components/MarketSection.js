async function loadDiscovery(retry = 0) {
  try {
    setLoadingDiscovery(true);
    addLog("üåã AI Discovery Pro ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏∏‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏ô‡πâ‡∏≥...");
    
    // ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° API ‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏°‡πà (v2)
    const res = await fetch("/api/visionary-discovery-pro-v2", { cache: "no-store" });
    if (!res.ok) throw new Error(`API ${res.status}`);

    const j = await res.json();
    const list = j.top || j.discovered || [];

    if (!list.length) throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡∏à‡∏≤‡∏Å AI Discovery Pro");

    const formatted = list.map((r) => ({
      symbol: r.symbol,
      lastClose: parseFloat(r.price) || 0,
      rsi: r.rsi || 0,
      reason: r.reason || "AI ‡∏û‡∏ö‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ï‡πâ‡∏ô‡∏ô‡πâ‡∏≥‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô + ‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏ä‡∏¥‡∏á‡∏ö‡∏ß‡∏Å",
      aiScore: r.aiScore || 0,
      trend: r.signal || "Hold",
      signal: r.signal || "Hold",
    }));

    setFutureDiscovery(formatted);
    addLog(`‚úÖ ‡∏û‡∏ö‡∏´‡∏∏‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏ô‡πâ‡∏≥ ${formatted.length} ‡∏ï‡∏±‡∏ß‡∏à‡∏≤‡∏Å AI Discovery Pro`);

    // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 30 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
    for (const s of formatted.slice(0, 30)) await fetchPrice(s.symbol);
  } catch (err) {
    addLog(`‚ö†Ô∏è Discovery failed: ${err.message}`);
    if (retry < 1) setTimeout(() => loadDiscovery(retry + 1), 3000);
  } finally {
    setLoadingDiscovery(false);
  }
}
