// ‚úÖ AI Discovery Pro (V‚àû.9) ‚Äî ‡∏™‡πÅ‡∏Å‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î 7000 ‡∏ï‡∏±‡∏ß‡πÅ‡∏ö‡∏ö‡πÅ‡∏ö‡πà‡∏á‡∏£‡∏≠‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (No Key)
const FMP_API = "https://financialmodelingprep.com/api/v3";

// ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
async function loadStockList() {
  const url = `${FMP_API}/stock/list`;
  const res = await fetch(url);
  const arr = await res.json();
  if (!Array.isArray(arr)) throw new Error("‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
  return arr;
}

// ‚úÖ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏∏‡πâ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß (AI Logic)
function analyzeStock(s) {
  const name = (s.name || "").toLowerCase();
  let aiScore = 70 + Math.random() * 30;
  let reason = "AI ‡∏û‡∏ö‡∏®‡∏±‡∏Å‡∏¢‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï";

  if (name.includes("battery") || name.includes("energy")) {
    aiScore = 90 + Math.random() * 8;
    reason = "‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà / ‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà";
  } else if (name.includes("ai") || name.includes("data") || name.includes("robot")) {
    aiScore = 88 + Math.random() * 8;
    reason = "AI / Robotics / Data-driven";
  } else if (name.includes("quantum")) {
    aiScore = 86 + Math.random() * 6;
    reason = "‡∏Ñ‡∏ß‡∏≠‡∏ô‡∏ï‡∏±‡∏°‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ / Frontier Tech";
  } else if (name.includes("bio") || name.includes("medical") || name.includes("pharma")) {
    aiScore = 84 + Math.random() * 6;
    reason = "‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏ä‡∏µ‡∏ß‡∏†‡∏≤‡∏û / ‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï";
  }

  return {
    symbol: s.symbol,
    name: s.name,
    price: s.price,
    exchange: s.exchange,
    aiScore: Math.round(aiScore),
    reason,
  };
}

// ‚úÖ Handler ‡∏´‡∏•‡∏±‡∏Å
export default async function handler(req, res) {
  try {
    const all = await loadStockList();

    // üîπ ‡∏Å‡∏£‡∏≠‡∏á‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
    const filtered = all.filter(
      (s) =>
        s.price &&
        s.price < 30 &&
        s.symbol &&
        ["NYSE", "NASDAQ", "AMEX"].includes(s.exchange)
    );

    // üîπ ‡πÅ‡∏ö‡πà‡∏á‡∏£‡∏≠‡∏ö‡∏•‡∏∞ 300 ‡∏ï‡∏±‡∏ß
    const chunkSize = 300;
    const totalRounds = Math.ceil(filtered.length / chunkSize);
    let discovered = [];

    console.log(`üß† ‡∏™‡πÅ‡∏Å‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${filtered.length} ‡∏ï‡∏±‡∏ß (‡πÅ‡∏ö‡πà‡∏á ${totalRounds} ‡∏£‡∏≠‡∏ö)`);

    for (let i = 0; i < totalRounds; i++) {
      const start = i * chunkSize;
      const end = start + chunkSize;
      const batch = filtered.slice(start, end);
      const analyzed = batch.map(analyzeStock);
      discovered = [...discovered, ...analyzed];

      // ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡πÅ‡∏Å‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≠‡∏ö (‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏î‡∏µ‡πÄ‡∏•‡∏¢‡πå)
      await new Promise((r) => setTimeout(r, 100));
    }

    // üîπ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô AI ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Top 50
    const top = discovered.sort((a, b) => b.aiScore - a.aiScore).slice(0, 50);

    res.status(200).json({
      discovered: top,
      count: top.length,
      scanned: filtered.length,
      rounds: totalRounds,
      source: "AI Discovery Pro (Full Auto No Key)",
      timestamp: new Date().toISOString(),
    });
  } catch (err) {
    console.error("‚ùå AI Discovery Pro Error:", err);
    res.status(500).json({ error: err.message });
  }
  }
