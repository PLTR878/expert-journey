// ‚úÖ /pages/api/scan.js ‚Äî Full Market Auto Scanner (US Stocks)
// ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á ‡∏™‡πÅ‡∏Å‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏ï‡∏•‡∏≤‡∏î NASDAQ, NYSE, AMEX
// ‡πÉ‡∏ä‡πâ server ‡πÄ‡∏î‡∏¥‡∏° (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á proxy ‡∏û‡∏¥‡πÄ‡∏®‡∏©)

import { ema, rsi, macd } from "../../lib/indicators.js";

export default async function handler(req, res) {
  try {
    const {
      rsiMin = 0,
      rsiMax = 100,
      priceMin = 0,
      priceMax = 10000,
    } = req.query;

    // üß© ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏ï‡∏•‡∏≤‡∏î (NASDAQ + NYSE + AMEX)
    const allTickers = await fetch(
      "https://dumbstockapi.com/stock?exchanges=NASDAQ,NYSE,AMEX"
    ).then((r) => r.json());

    // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏ó‡∏µ‡πà 6000 ‡∏ï‡∏±‡∏ß (‡∏û‡∏≠‡πÜ ‡∏Å‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏ï‡∏•‡∏≤‡∏î)
    const symbols = allTickers.map((s) => s.ticker).slice(0, 6000);
    const results = [];

    console.log(`üõ∞Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πÅ‡∏Å‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${symbols.length} ‡∏ï‡∏±‡∏ß...`);

    for (let i = 0; i < symbols.length; i++) {
      const symbol = symbols[i];
      try {
        // Yahoo API (‡∏ú‡πà‡∏≤‡∏ô Jina proxy ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£)
        const url = `https://r.jina.ai/https://query1.finance.yahoo.com/v8/finance/chart/${symbol}?range=6mo&interval=1d`;
        const r = await fetch(url, { cache: "no-store" });
        const j = await r.json();
        const data = j?.chart?.result?.[0];
        if (!data) continue;

        const q = data.indicators?.quote?.[0];
        const c = q?.close?.filter(Boolean) || [];
        if (c.length < 30) continue;

        const lastClose = c.at(-1);
        if (lastClose < priceMin || lastClose > priceMax) continue;

        const R = rsi(c, 14)?.at(-1) ?? 50;
        const M = macd(c, 12, 26, 9);
        const macdHist = M?.hist?.at(-1) ?? 0;
        const ema20 = ema(c, 20)?.at(-1);
        const ema50 = ema(c, 50)?.at(-1);
        const ema200 = ema(c, 200)?.at(-1);

        if (R < rsiMin || R > rsiMax) continue;

        const trend =
          ema20 > ema50 && ema50 > ema200
            ? "Uptrend"
            : ema20 < ema50 && ema50 < ema200
            ? "Downtrend"
            : "Sideway";

        let signal = "Hold";
        if (R < 35 && macdHist > 0) signal = "Buy";
        else if (R > 65 && macdHist < 0) signal = "Sell";

        results.push({
          symbol,
          lastClose: Number(lastClose.toFixed(2)),
          rsi: Number(R.toFixed(1)),
          trend,
          signal,
          confidence: Math.round(Math.abs(R - 50) / 50 * 100),
        });

        // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÇ‡∏î‡∏ô block
        await new Promise((r) => setTimeout(r, 250));
      } catch (err) {
        console.error(`‚ùå ${symbol}:`, err.message);
      }
    }

    console.log(`‚úÖ ‡∏™‡πÅ‡∏Å‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${results.length} ‡∏ï‡∏±‡∏ß`);
    res.status(200).json({ total: results.length, results });
  } catch (err) {
    console.error("Scan error:", err.message);
    res.status(500).json({ error: err.message });
  }
                                 }
